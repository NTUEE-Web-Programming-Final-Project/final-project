// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Announcement {
  id      Int    @id @default(autoincrement())
  title   String
  date    String
  content String
}

model User {
  id                      Int                    @id @default(autoincrement())
  name                    String
  studentID               String
  password                String
  photoLink               String
  introduction            String?
  questions               Question[]
  questionsId             Int[]
  questionComments        QuestionComment[]
  questionCommentsId      Int[]
  solutions               Solution[]
  solutionsId             Int[]
  articles                Article[]
  articlesId              Int[]
  articleComments         ArticleComment[]
  articleCommentsId       Int[]
  likedQuestion           LikedQuestion[] // to store the history of liked questions
  likedQuestionsId        Int[]
  likedQuestionComments   LikedQuestionComment[] // to store the history of liked question comments
  likedQuestionCommentsId Int[]
  likedSolutions          LikedSolution[] // to store the history of liked solutions
  likedSolutionsId        Int[]
  likedArticles           LikedArticle[] // to store the history of liked articles
  likedArticlesId         Int[]
  likedArticleComments    LikedArticleComment[] // to store the history of liked article comments
  likedArticleCommentsId  Int[]

  @@unique([studentID, password]) // unique pair
}

model Question {
  id          Int               @id @default(autoincrement())
  asker       User              @relation(fields: [askerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  askerId     Int
  title       String
  date        String
  content     String
  topic       String
  tags        String[]
  comments    QuestionComment[]
  commentsId  Int[]
  solutions   Solution[]
  solutionsId Int[]
  likes       LikedQuestion[]
  likesId     Int[]
}

model QuestionComment {
  id             Int                    @id @default(autoincrement())
  commenter      User                   @relation(fields: [commenterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commenterId    Int
  content        String
  rootQuestion   Question               @relation(fields: [rootQuesitonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootQuesitonId Int
  date           String
  likes          LikedQuestionComment[]
  likesId        Int[]
}

model Solution {
  id             Int             @id @default(autoincrement())
  date           String
  solver         User            @relation(fields: [solverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  solverId       Int
  rootQuestion   Question        @relation(fields: [rootQuesitonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootQuesitonId Int
  content        String
  likes          LikedSolution[]
  likesId        Int[]
}

model Article {
  id         Int              @id @default(autoincrement())
  writer     User             @relation(fields: [writerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  writerId   Int
  date       String
  title      String
  content    String
  tags       String[]
  topic      String
  comments   ArticleComment[]
  commentsId Int[]
  likes      LikedArticle[]
  likesId    Int[]
}

model ArticleComment {
  id            Int                   @id @default(autoincrement())
  commenter     User                  @relation(fields: [commenterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commenterId   Int
  content       String
  date          String
  rootArticle   Article               @relation(fields: [rootArticleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootArticleId Int
  likes         LikedArticleComment[]
  likesId       Int[]
}

// to store questions an user liked
model LikedQuestion {
  id         Int      @id @default(autoincrement())
  liker      User     @relation(fields: [likerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likerId    Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

// to store question comments an user liked
model LikedQuestionComment {
  id                Int             @id @default(autoincrement())
  liker             User            @relation(fields: [likerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likerId           Int
  questionComment   QuestionComment @relation(fields: [questionCommentId], references: [id])
  questionCommentId Int
}

// to store solutions an user liked
model LikedSolution {
  id         Int      @id @default(autoincrement())
  liker      User     @relation(fields: [likerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likerId    Int
  solution   Solution @relation(fields: [solutionId], references: [id])
  solutionId Int
}

// to store articles an user liked
model LikedArticle {
  id        Int     @id @default(autoincrement())
  liker     User    @relation(fields: [likerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likerId   Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId Int
}

// to store article comments an user liked
model LikedArticleComment {
  id               Int            @id @default(autoincrement())
  liker            User           @relation(fields: [likerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likerId          Int
  articleComment   ArticleComment @relation(fields: [articleCommentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleCommentId Int
}
