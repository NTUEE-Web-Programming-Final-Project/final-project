// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Announcement {
  id      Int    @id @default(autoincrement())
  title   String
  date    String
  content String
}

model User {
  id                 Int               @id @default(autoincrement())
  name               String
  studentID          String            @unique
  password           String            @unique
  photoLink          String
  introduction       String?
  questions          Question[]
  questionsId        Int[]
  questionComments   QuestionComment[]
  questionCommentsId Int[]
  solutions          Solution[]
  solutionsId        Int[]
  atricles           Article[]
  articlesId         Int[]
  articleComments    ArticleComment[]
  articleCommentsId  Int[]
}

model Question {
  id          Int               @id @default(autoincrement())
  asker       User              @relation(fields: [askerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  askerId     Int
  title       String
  date        String
  content     String
  topic       String
  zap         Int
  isMe        Int
  bombFish    Int
  tags        String[]
  comments    QuestionComment[]
  commentsId  Int[]
  solutions   Solution[]
  solutionsId Int[]
}

model QuestionComment {
  id             Int      @id @default(autoincrement())
  commenter      User     @relation(fields: [commenterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commenterId    Int
  content        String
  rootQuestion   Question @relation(fields: [rootQuesitonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootQuesitonId Int
  date           String
  zap            Int
}

model Solution {
  id             Int      @id @default(autoincrement())
  date           String
  solver         User     @relation(fields: [solverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  solverId       Int
  rootQuestion   Question @relation(fields: [rootQuesitonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootQuesitonId Int
  content        String
  zap            Int
  isMe           Int
  bombFish       Int
  tags           String[]
  comments       QuestionComment[]
  commentsId     Int[]
  solutions      Solution[]
  solutionsId    Int[]
}

model QuestionComment {
  id              Int       @id @default(autoincrement())
  commenter       User      @relation(fields: [commenterId], references: [id])
  commenterId     Int
  content         String
  rootQuestion    Question  @relation(fields: [rootQuesitonId], references: [id])
  rootQuesitonId  Int
  date            String
  zap             Int
}

model Solution {
  id              Int       @id @default(autoincrement())
  date            String
  solver          User      @relation(fields: [solverId], references: [id])
  solverId        Int
  rootQuestion    Question  @relation(fields: [rootQuesitonId], references: [id])
  rootQuesitonId  Int
  content         String
  zap             Int
  isMe            Int
  bombFish        Int
}

model Article {
  id         Int              @id @default(autoincrement())
  writer     User             @relation(fields: [writerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  writerId   Int
  date       String
  title      String
  content    String
  tags       String[]
  zap        Int
  isMe       Int
  bombFish   Int
  topic      String
  comments   ArticleComment[]
  commentsId Int[]
}

model ArticleComment {
  id            Int     @id @default(autoincrement())
  commenter     User    @relation(fields: [commenterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commenterId   Int
  content       String
  date          String
  rootArticle   Article @relation(fields: [rootArticleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootArticleId Int
  zap           Int
  isMe          Int
  bombFish      Int
  topic         String
  comments      ArticleComment[]
  commentsId    Int[]
}

model ArticleComment {
  id              Int       @id @default(autoincrement())
  commenter       User      @relation(fields: [commenterId], references: [id])
  commenterId     Int
  content         String
  date            String
  rootArticle     Article   @relation(fields: [rootArticleId], references: [id])
  rootArticleId   Int
}