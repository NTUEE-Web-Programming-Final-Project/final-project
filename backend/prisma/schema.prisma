// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Announcement {
  id      Int     @id @default(autoincrement())
  title   String
  date    String
  content String
}

model User {
  id                  Int               @id @default(autoincrement())
  name                String
  studentID           String
  password            String
  photoLink           String
  introduction        String?
  questions           Question[]
  questionsId         Int[]
  questionComments    QuestionComment[]
  questionCommentsId  Int[]
  solutions           Solution[]
  solutionsId         Int[]
  atricles            Article[]
  articlesId          Int[]
  articleComments     ArticleComment[]
  articleCommentsId   Int[]
}

model Question {
  id          Int               @id @default(autoincrement())
  asker       User              @relation(fields: [askerId], references: [id])
  askerId     Int
  title       String
  date        String
  content     String
  topic       String
  tags        String[]
  comments    QuestionComment[]
  likes       Int[]
  solutions   Solution[]
}

model QuestionComment {
  id              Int       @id @default(autoincrement())
  commenter       User      @relation(fields: [commenterId], references: [id])
  commenterId     Int
  date            String
  content         String
  rootQuestion    Question  @relation(fields: [rootQuesitonId], references: [id])
  rootQuesitonId  Int
  like            Int
}

model Solution {
  id              Int       @id @default(autoincrement())
  date            String
  solver          User      @relation(fields: [solverId], references: [id])
  solverId        Int
  rootQuestion    Question  @relation(fields: [rootQuesitonId], references: [id])
  rootQuesitonId  Int
  content         String
  likes           Int[]
}

model Article {
  id            Int               @id @default(autoincrement())
  writer        User              @relation(fields: [writerId], references: [id])
  writerId      Int
  date          String
  title         String
  content       String
  tags          String[]
  comments      ArticleComment[]
  likes         Int[]
  topic         String
}

model ArticleComment {
  id              Int       @id @default(autoincrement())
  commenter       User      @relation(fields: [commenterId], references: [id])
  commenterId     Int
  date            String
  content         String
  rootArticle     Article   @relation(fields: [rootArticleId], references: [id])
  rootArticleId   Int
  like            Int
}